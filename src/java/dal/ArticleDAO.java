package dal;

import model.Article;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;
import util.DBContext;

/**
 * Data Access Object (DAO) cho b·∫£ng Articles, x·ª≠ l√Ω c√°c thao t√°c CRUD v√† truy v·∫•n d·ªØ li·ªáu.
 */
public class ArticleDAO extends DBContext {

    // Ph∆∞∆°ng th·ª©c √°nh x·∫° ResultSet sang ƒë·ªëi t∆∞·ª£ng Article
    private static Article mapResultSetToArticle(ResultSet rs) throws SQLException {
        return new Article(
                rs.getInt("Id"),
                rs.getString("Title"),
                rs.getString("Description"),
                rs.getString("Category"),
                rs.getTimestamp("PublishDate"),
                rs.getInt("AuthorId"),
                rs.getString("ImageUrl"),
                rs.getTimestamp("CreatedAt"),
                rs.getTimestamp("UpdatedAt")
        );
    }

    /**
     * L·∫•y t·∫•t c·∫£ b√†i vi·∫øt t·ª´ database.
     * @return List<Article> danh s√°ch c√°c b√†i vi·∫øt.
     */
    public List<Article> getAllArticles() {
        List<Article> articles = new ArrayList<>();
        String sql = "SELECT Id, Title, Description, Category, PublishDate, AuthorId, ImageUrl, CreatedAt, UpdatedAt FROM Articles ORDER BY PublishDate DESC";

        try (PreparedStatement ps = connection.prepareStatement(sql);
             ResultSet rs = ps.executeQuery()) {
            while (rs.next()) {
                articles.add(mapResultSetToArticle(rs));
            }
            System.out.println("‚úÖ Found " + articles.size() + " articles.");
        } catch (SQLException e) {
            System.err.println("‚ùå SQL Error in getAllArticles: " + e.getMessage());
            e.printStackTrace();
        }
        return articles;
    }

    /**
     * Th√™m b√†i vi·∫øt m·ªõi v√†o database.
     * @param article ƒê·ªëi t∆∞·ª£ng Article c·∫ßn th√™m.
     */
    public void addArticle(Article article) {
        String sql = "INSERT INTO Articles (Title, Description, Category, AuthorId, ImageUrl, PublishDate, CreatedAt) VALUES (?, ?, ?, ?, ?, GETDATE(), GETDATE())";

        try (PreparedStatement ps = connection.prepareStatement(sql)) {
            ps.setString(1, article.getTitle());
            ps.setString(2, article.getDescription());
            ps.setString(3, article.getCategory());
            ps.setInt(4, article.getAuthorId());
            ps.setString(5, article.getImageUrl());
            ps.executeUpdate();
            System.out.println("‚úÖ Article added successfully: " + article.getTitle());
        } catch (SQLException e) {
            System.err.println("‚ùå Error adding article: " + e.getMessage());
            e.printStackTrace();
        }
    }

    /**
     * C·∫≠p nh·∫≠t th√¥ng tin b√†i vi·∫øt.
     * @param article ƒê·ªëi t∆∞·ª£ng Article c·∫ßn c·∫≠p nh·∫≠t.
     */
    public void updateArticle(Article article) {
        String sql = "UPDATE Articles SET Title = ?, Description = ?, Category = ?, ImageUrl = ?, UpdatedAt = GETDATE() WHERE Id = ?";

        try (PreparedStatement ps = connection.prepareStatement(sql)) {
            ps.setString(1, article.getTitle());
            ps.setString(2, article.getDescription());
            ps.setString(3, article.getCategory());
            ps.setString(4, article.getImageUrl());
            ps.setInt(5, article.getId());
            int rowsAffected = ps.executeUpdate();
            if (rowsAffected > 0) {
                System.out.println("‚úÖ Article updated successfully: " + article.getTitle());
            } else {
                System.out.println("‚ö†Ô∏è No article updated (ID: " + article.getId() + ")");
            }
        } catch (SQLException e) {
            System.err.println("‚ùå Error updating article: " + e.getMessage());
            e.printStackTrace();
        }
    }

    /**
     * X√≥a b√†i vi·∫øt theo ID.
     * @param id ID c·ªßa b√†i vi·∫øt c·∫ßn x√≥a.
     */
    public void deleteArticle(int id) {
        String sql = "DELETE FROM Articles WHERE Id = ?";

        try (PreparedStatement ps = connection.prepareStatement(sql)) {
            ps.setInt(1, id);
            int rowsAffected = ps.executeUpdate();
            if (rowsAffected > 0) {
                System.out.println("‚úÖ Article deleted successfully: ID = " + id);
            } else {
                System.out.println("‚ö†Ô∏è No article found to delete (ID: " + id + ")");
            }
        } catch (SQLException e) {
            System.err.println("‚ùå Error deleting article: " + e.getMessage());
            e.printStackTrace();
        }
    }

    /**
     * L·∫•y b√†i vi·∫øt theo ID.
     * @param id ID c·ªßa b√†i vi·∫øt c·∫ßn l·∫•y.
     * @return Article ƒë·ªëi t∆∞·ª£ng b√†i vi·∫øt, ho·∫∑c null n·∫øu kh√¥ng t√¨m th·∫•y.
     */
    public Article getArticleById(int id) {
        String sql = "SELECT Id, Title, Description, Category, PublishDate, AuthorId, ImageUrl, CreatedAt, UpdatedAt FROM Articles WHERE Id = ?";
        Article article = null;

        try (PreparedStatement ps = connection.prepareStatement(sql)) {
            ps.setInt(1, id);
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    article = mapResultSetToArticle(rs);
                    System.out.println("‚úÖ Found article by ID: " + id + ", Title: " + article.getTitle());
                } else {
                    System.out.println("‚ö†Ô∏è No article found with ID: " + id);
                }
            }
        } catch (SQLException e) {
            System.err.println("‚ùå Error querying article by ID: " + e.getMessage());
            e.printStackTrace();
        }
        return article;
    }

    public static void main(String[] args) {
        ArticleDAO dao = new ArticleDAO();
        
        // Test getAllArticles()
        List<Article> articles = dao.getAllArticles();
        System.out.println("üîç Found " + articles.size() + " articles.");
        for (Article a : articles) {
            System.out.println("üìù ID: " + a.getId() + ", Title: " + a.getTitle());
        }
    }
}